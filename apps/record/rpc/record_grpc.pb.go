// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: rpc/record.proto

package red_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	SubmitRecord(ctx context.Context, in *SubmitRecordRequest, opts ...grpc.CallOption) (*SubmitRecordResponse, error)
	ModifyRecord(ctx context.Context, in *ModifyRecordRequest, opts ...grpc.CallOption) (*ModifyRecordResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GetBestRecord(ctx context.Context, in *GetBestRecordRequest, opts ...grpc.CallOption) (*GetBestRecordResponse, error)
	GetRecordPage(ctx context.Context, in *GetRecordPageRequest, opts ...grpc.CallOption) (*GetRecordPageResponse, error)
	GetDailyTaskView(ctx context.Context, in *GetDailyTaskViewRequest, opts ...grpc.CallOption) (*GetDailyTaskViewResponse, error)
	GetQuestionRecordCount(ctx context.Context, in *GetQuestionRecordCountRequest, opts ...grpc.CallOption) (*GetQuestionRecordCountResponse, error)
	GetAccountPassedCount(ctx context.Context, in *GetAccountPassedCountRequest, opts ...grpc.CallOption) (*GetAccountPassedCountResponse, error)
	CheckAccountPass(ctx context.Context, in *CheckAccountPassRequest, opts ...grpc.CallOption) (*CheckAccountPassResponse, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) SubmitRecord(ctx context.Context, in *SubmitRecordRequest, opts ...grpc.CallOption) (*SubmitRecordResponse, error) {
	out := new(SubmitRecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/SubmitRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) ModifyRecord(ctx context.Context, in *ModifyRecordRequest, opts ...grpc.CallOption) (*ModifyRecordResponse, error) {
	out := new(ModifyRecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/ModifyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetBestRecord(ctx context.Context, in *GetBestRecordRequest, opts ...grpc.CallOption) (*GetBestRecordResponse, error) {
	out := new(GetBestRecordResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetBestRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetRecordPage(ctx context.Context, in *GetRecordPageRequest, opts ...grpc.CallOption) (*GetRecordPageResponse, error) {
	out := new(GetRecordPageResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetRecordPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetDailyTaskView(ctx context.Context, in *GetDailyTaskViewRequest, opts ...grpc.CallOption) (*GetDailyTaskViewResponse, error) {
	out := new(GetDailyTaskViewResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetDailyTaskView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetQuestionRecordCount(ctx context.Context, in *GetQuestionRecordCountRequest, opts ...grpc.CallOption) (*GetQuestionRecordCountResponse, error) {
	out := new(GetQuestionRecordCountResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetQuestionRecordCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetAccountPassedCount(ctx context.Context, in *GetAccountPassedCountRequest, opts ...grpc.CallOption) (*GetAccountPassedCountResponse, error) {
	out := new(GetAccountPassedCountResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/GetAccountPassedCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) CheckAccountPass(ctx context.Context, in *CheckAccountPassRequest, opts ...grpc.CallOption) (*CheckAccountPassResponse, error) {
	out := new(CheckAccountPassResponse)
	err := c.cc.Invoke(ctx, "/record.RecordService/CheckAccountPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	SubmitRecord(context.Context, *SubmitRecordRequest) (*SubmitRecordResponse, error)
	ModifyRecord(context.Context, *ModifyRecordRequest) (*ModifyRecordResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	GetBestRecord(context.Context, *GetBestRecordRequest) (*GetBestRecordResponse, error)
	GetRecordPage(context.Context, *GetRecordPageRequest) (*GetRecordPageResponse, error)
	GetDailyTaskView(context.Context, *GetDailyTaskViewRequest) (*GetDailyTaskViewResponse, error)
	GetQuestionRecordCount(context.Context, *GetQuestionRecordCountRequest) (*GetQuestionRecordCountResponse, error)
	GetAccountPassedCount(context.Context, *GetAccountPassedCountRequest) (*GetAccountPassedCountResponse, error)
	CheckAccountPass(context.Context, *CheckAccountPassRequest) (*CheckAccountPassResponse, error)
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) SubmitRecord(context.Context, *SubmitRecordRequest) (*SubmitRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRecord not implemented")
}
func (UnimplementedRecordServiceServer) ModifyRecord(context.Context, *ModifyRecordRequest) (*ModifyRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRecord not implemented")
}
func (UnimplementedRecordServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedRecordServiceServer) GetBestRecord(context.Context, *GetBestRecordRequest) (*GetBestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestRecord not implemented")
}
func (UnimplementedRecordServiceServer) GetRecordPage(context.Context, *GetRecordPageRequest) (*GetRecordPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordPage not implemented")
}
func (UnimplementedRecordServiceServer) GetDailyTaskView(context.Context, *GetDailyTaskViewRequest) (*GetDailyTaskViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTaskView not implemented")
}
func (UnimplementedRecordServiceServer) GetQuestionRecordCount(context.Context, *GetQuestionRecordCountRequest) (*GetQuestionRecordCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionRecordCount not implemented")
}
func (UnimplementedRecordServiceServer) GetAccountPassedCount(context.Context, *GetAccountPassedCountRequest) (*GetAccountPassedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountPassedCount not implemented")
}
func (UnimplementedRecordServiceServer) CheckAccountPass(context.Context, *CheckAccountPassRequest) (*CheckAccountPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountPass not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_SubmitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).SubmitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/SubmitRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).SubmitRecord(ctx, req.(*SubmitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_ModifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).ModifyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/ModifyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).ModifyRecord(ctx, req.(*ModifyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetBestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetBestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetBestRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetBestRecord(ctx, req.(*GetBestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetRecordPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetRecordPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetRecordPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetRecordPage(ctx, req.(*GetRecordPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetDailyTaskView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTaskViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetDailyTaskView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetDailyTaskView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetDailyTaskView(ctx, req.(*GetDailyTaskViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetQuestionRecordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRecordCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetQuestionRecordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetQuestionRecordCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetQuestionRecordCount(ctx, req.(*GetQuestionRecordCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetAccountPassedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountPassedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetAccountPassedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/GetAccountPassedCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetAccountPassedCount(ctx, req.(*GetAccountPassedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_CheckAccountPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).CheckAccountPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.RecordService/CheckAccountPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).CheckAccountPass(ctx, req.(*CheckAccountPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRecord",
			Handler:    _RecordService_SubmitRecord_Handler,
		},
		{
			MethodName: "ModifyRecord",
			Handler:    _RecordService_ModifyRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _RecordService_GetRecord_Handler,
		},
		{
			MethodName: "GetBestRecord",
			Handler:    _RecordService_GetBestRecord_Handler,
		},
		{
			MethodName: "GetRecordPage",
			Handler:    _RecordService_GetRecordPage_Handler,
		},
		{
			MethodName: "GetDailyTaskView",
			Handler:    _RecordService_GetDailyTaskView_Handler,
		},
		{
			MethodName: "GetQuestionRecordCount",
			Handler:    _RecordService_GetQuestionRecordCount_Handler,
		},
		{
			MethodName: "GetAccountPassedCount",
			Handler:    _RecordService_GetAccountPassedCount_Handler,
		},
		{
			MethodName: "CheckAccountPass",
			Handler:    _RecordService_CheckAccountPass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/record.proto",
}
