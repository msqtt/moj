// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: rpc/record.proto

package red_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckAccountPassResponse_PassStatus int32

const (
	CheckAccountPassResponse_Undo    CheckAccountPassResponse_PassStatus = 0
	CheckAccountPassResponse_Working CheckAccountPassResponse_PassStatus = 1
	CheckAccountPassResponse_Pass    CheckAccountPassResponse_PassStatus = 2
)

// Enum value maps for CheckAccountPassResponse_PassStatus.
var (
	CheckAccountPassResponse_PassStatus_name = map[int32]string{
		0: "Undo",
		1: "Working",
		2: "Pass",
	}
	CheckAccountPassResponse_PassStatus_value = map[string]int32{
		"Undo":    0,
		"Working": 1,
		"Pass":    2,
	}
)

func (x CheckAccountPassResponse_PassStatus) Enum() *CheckAccountPassResponse_PassStatus {
	p := new(CheckAccountPassResponse_PassStatus)
	*p = x
	return p
}

func (x CheckAccountPassResponse_PassStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAccountPassResponse_PassStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_record_proto_enumTypes[0].Descriptor()
}

func (CheckAccountPassResponse_PassStatus) Type() protoreflect.EnumType {
	return &file_rpc_record_proto_enumTypes[0]
}

func (x CheckAccountPassResponse_PassStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAccountPassResponse_PassStatus.Descriptor instead.
func (CheckAccountPassResponse_PassStatus) EnumDescriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{18, 0}
}

type SubmitRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  string  `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	QuestionID string  `protobuf:"bytes,2,opt,name=questionID,proto3" json:"questionID,omitempty"`
	GameID     *string `protobuf:"bytes,3,opt,name=gameID,proto3,oneof" json:"gameID,omitempty"`
	Language   string  `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Code       string  `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SubmitRecordRequest) Reset() {
	*x = SubmitRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRecordRequest) ProtoMessage() {}

func (x *SubmitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRecordRequest.ProtoReflect.Descriptor instead.
func (*SubmitRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitRecordRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *SubmitRecordRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *SubmitRecordRequest) GetGameID() string {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return ""
}

func (x *SubmitRecordRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SubmitRecordRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type SubmitRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	Time     int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubmitRecordResponse) Reset() {
	*x = SubmitRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRecordResponse) ProtoMessage() {}

func (x *SubmitRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRecordResponse.ProtoReflect.Descriptor instead.
func (*SubmitRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitRecordResponse) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *SubmitRecordResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ModifyRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID       string `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	JudgeStatus    string `protobuf:"bytes,2,opt,name=judgeStatus,proto3" json:"judgeStatus,omitempty"`
	FailedReason   string `protobuf:"bytes,3,opt,name=failedReason,proto3" json:"failedReason,omitempty"`
	NumberFinishAt int64  `protobuf:"varint,4,opt,name=numberFinishAt,proto3" json:"numberFinishAt,omitempty"`
	TotalQuestion  int64  `protobuf:"varint,5,opt,name=totalQuestion,proto3" json:"totalQuestion,omitempty"`
	MemoryUsed     int64  `protobuf:"varint,6,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
	TimeUsed       int64  `protobuf:"varint,7,opt,name=timeUsed,proto3" json:"timeUsed,omitempty"`
	CpuTimeUsed    int64  `protobuf:"varint,8,opt,name=cpuTimeUsed,proto3" json:"cpuTimeUsed,omitempty"`
}

func (x *ModifyRecordRequest) Reset() {
	*x = ModifyRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRecordRequest) ProtoMessage() {}

func (x *ModifyRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRecordRequest.ProtoReflect.Descriptor instead.
func (*ModifyRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyRecordRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *ModifyRecordRequest) GetJudgeStatus() string {
	if x != nil {
		return x.JudgeStatus
	}
	return ""
}

func (x *ModifyRecordRequest) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *ModifyRecordRequest) GetNumberFinishAt() int64 {
	if x != nil {
		return x.NumberFinishAt
	}
	return 0
}

func (x *ModifyRecordRequest) GetTotalQuestion() int64 {
	if x != nil {
		return x.TotalQuestion
	}
	return 0
}

func (x *ModifyRecordRequest) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *ModifyRecordRequest) GetTimeUsed() int64 {
	if x != nil {
		return x.TimeUsed
	}
	return 0
}

func (x *ModifyRecordRequest) GetCpuTimeUsed() int64 {
	if x != nil {
		return x.CpuTimeUsed
	}
	return 0
}

type ModifyRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ModifyRecordResponse) Reset() {
	*x = ModifyRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRecordResponse) ProtoMessage() {}

func (x *ModifyRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRecordResponse.ProtoReflect.Descriptor instead.
func (*ModifyRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{3}
}

func (x *ModifyRecordResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID         string  `protobuf:"bytes,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	AccountID        string  `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	GameID           *string `protobuf:"bytes,3,opt,name=gameID,proto3,oneof" json:"gameID,omitempty"`
	QuestionID       string  `protobuf:"bytes,4,opt,name=questionID,proto3" json:"questionID,omitempty"`
	Language         string  `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Code             string  `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	CodeHash         string  `protobuf:"bytes,7,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	JudgeStatus      string  `protobuf:"bytes,8,opt,name=judgeStatus,proto3" json:"judgeStatus,omitempty"`
	FailedReason     *string `protobuf:"bytes,9,opt,name=failedReason,proto3,oneof" json:"failedReason,omitempty"`
	NumberFinishedAt int64   `protobuf:"varint,10,opt,name=numberFinishedAt,proto3" json:"numberFinishedAt,omitempty"`
	TotalQuestion    int64   `protobuf:"varint,11,opt,name=totalQuestion,proto3" json:"totalQuestion,omitempty"`
	CreateTime       int64   `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	FinishTime       int64   `protobuf:"varint,13,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
	MemoryUsed       int64   `protobuf:"varint,14,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
	TimeUsed         int64   `protobuf:"varint,15,opt,name=timeUsed,proto3" json:"timeUsed,omitempty"`
	CpuTimeUsed      int64   `protobuf:"varint,16,opt,name=cpuTimeUsed,proto3" json:"cpuTimeUsed,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *Record) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Record) GetGameID() string {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return ""
}

func (x *Record) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *Record) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Record) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Record) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *Record) GetJudgeStatus() string {
	if x != nil {
		return x.JudgeStatus
	}
	return ""
}

func (x *Record) GetFailedReason() string {
	if x != nil && x.FailedReason != nil {
		return *x.FailedReason
	}
	return ""
}

func (x *Record) GetNumberFinishedAt() int64 {
	if x != nil {
		return x.NumberFinishedAt
	}
	return 0
}

func (x *Record) GetTotalQuestion() int64 {
	if x != nil {
		return x.TotalQuestion
	}
	return 0
}

func (x *Record) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Record) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *Record) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *Record) GetTimeUsed() int64 {
	if x != nil {
		return x.TimeUsed
	}
	return 0
}

func (x *Record) GetCpuTimeUsed() int64 {
	if x != nil {
		return x.CpuTimeUsed
	}
	return 0
}

type GetRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetRecordResponse) Reset() {
	*x = GetRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordResponse) ProtoMessage() {}

func (x *GetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordResponse.ProtoReflect.Descriptor instead.
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecordResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type GetBestRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string  `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AccountID  string  `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	GameID     *string `protobuf:"bytes,3,opt,name=gameID,proto3,oneof" json:"gameID,omitempty"`
}

func (x *GetBestRecordRequest) Reset() {
	*x = GetBestRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBestRecordRequest) ProtoMessage() {}

func (x *GetBestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBestRecordRequest.ProtoReflect.Descriptor instead.
func (*GetBestRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{7}
}

func (x *GetBestRecordRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *GetBestRecordRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetBestRecordRequest) GetGameID() string {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return ""
}

type GetBestRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetBestRecordResponse) Reset() {
	*x = GetBestRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBestRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBestRecordResponse) ProtoMessage() {}

func (x *GetBestRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBestRecordResponse.ProtoReflect.Descriptor instead.
func (*GetBestRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{8}
}

func (x *GetBestRecordResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type GetRecordPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string  `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AccountID  string  `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	GameID     *string `protobuf:"bytes,3,opt,name=gameID,proto3,oneof" json:"gameID,omitempty"`
	Page       int32   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32   `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetRecordPageRequest) Reset() {
	*x = GetRecordPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordPageRequest) ProtoMessage() {}

func (x *GetRecordPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordPageRequest.ProtoReflect.Descriptor instead.
func (*GetRecordPageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{9}
}

func (x *GetRecordPageRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *GetRecordPageRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetRecordPageRequest) GetGameID() string {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return ""
}

func (x *GetRecordPageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRecordPageRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetRecordPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total   int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetRecordPageResponse) Reset() {
	*x = GetRecordPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordPageResponse) ProtoMessage() {}

func (x *GetRecordPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordPageResponse.ProtoReflect.Descriptor instead.
func (*GetRecordPageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{10}
}

func (x *GetRecordPageResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetRecordPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetDailyTaskViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetDailyTaskViewRequest) Reset() {
	*x = GetDailyTaskViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyTaskViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyTaskViewRequest) ProtoMessage() {}

func (x *GetDailyTaskViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyTaskViewRequest.ProtoReflect.Descriptor instead.
func (*GetDailyTaskViewRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{11}
}

func (x *GetDailyTaskViewRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetDailyTaskViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitNumber int64 `protobuf:"varint,1,opt,name=submitNumber,proto3" json:"submitNumber,omitempty"`
	FinishNumber int64 `protobuf:"varint,2,opt,name=finishNumber,proto3" json:"finishNumber,omitempty"`
	Time         int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetDailyTaskViewResponse) Reset() {
	*x = GetDailyTaskViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyTaskViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyTaskViewResponse) ProtoMessage() {}

func (x *GetDailyTaskViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyTaskViewResponse.ProtoReflect.Descriptor instead.
func (*GetDailyTaskViewResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{12}
}

func (x *GetDailyTaskViewResponse) GetSubmitNumber() int64 {
	if x != nil {
		return x.SubmitNumber
	}
	return 0
}

func (x *GetDailyTaskViewResponse) GetFinishNumber() int64 {
	if x != nil {
		return x.FinishNumber
	}
	return 0
}

func (x *GetDailyTaskViewResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type GetQuestionRecordCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string  `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	GameID     *string `protobuf:"bytes,2,opt,name=gameID,proto3,oneof" json:"gameID,omitempty"`
}

func (x *GetQuestionRecordCountRequest) Reset() {
	*x = GetQuestionRecordCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionRecordCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRecordCountRequest) ProtoMessage() {}

func (x *GetQuestionRecordCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRecordCountRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionRecordCountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{13}
}

func (x *GetQuestionRecordCountRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *GetQuestionRecordCountRequest) GetGameID() string {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return ""
}

type GetQuestionRecordCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedCount int64 `protobuf:"varint,1,opt,name=passedCount,proto3" json:"passedCount,omitempty"`
	SubmitTotal int64 `protobuf:"varint,2,opt,name=submitTotal,proto3" json:"submitTotal,omitempty"`
}

func (x *GetQuestionRecordCountResponse) Reset() {
	*x = GetQuestionRecordCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionRecordCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRecordCountResponse) ProtoMessage() {}

func (x *GetQuestionRecordCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRecordCountResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionRecordCountResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{14}
}

func (x *GetQuestionRecordCountResponse) GetPassedCount() int64 {
	if x != nil {
		return x.PassedCount
	}
	return 0
}

func (x *GetQuestionRecordCountResponse) GetSubmitTotal() int64 {
	if x != nil {
		return x.SubmitTotal
	}
	return 0
}

type GetAccountPassedCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *GetAccountPassedCountRequest) Reset() {
	*x = GetAccountPassedCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountPassedCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountPassedCountRequest) ProtoMessage() {}

func (x *GetAccountPassedCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountPassedCountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountPassedCountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{15}
}

func (x *GetAccountPassedCountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetAccountPassedCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eazy   int64 `protobuf:"varint,1,opt,name=eazy,proto3" json:"eazy,omitempty"`
	Normal int64 `protobuf:"varint,2,opt,name=normal,proto3" json:"normal,omitempty"`
	Hard   int64 `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
}

func (x *GetAccountPassedCountResponse) Reset() {
	*x = GetAccountPassedCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountPassedCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountPassedCountResponse) ProtoMessage() {}

func (x *GetAccountPassedCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountPassedCountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountPassedCountResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{16}
}

func (x *GetAccountPassedCountResponse) GetEazy() int64 {
	if x != nil {
		return x.Eazy
	}
	return 0
}

func (x *GetAccountPassedCountResponse) GetNormal() int64 {
	if x != nil {
		return x.Normal
	}
	return 0
}

func (x *GetAccountPassedCountResponse) GetHard() int64 {
	if x != nil {
		return x.Hard
	}
	return 0
}

type CheckAccountPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	QuestionID string `protobuf:"bytes,2,opt,name=questionID,proto3" json:"questionID,omitempty"`
}

func (x *CheckAccountPassRequest) Reset() {
	*x = CheckAccountPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccountPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountPassRequest) ProtoMessage() {}

func (x *CheckAccountPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountPassRequest.ProtoReflect.Descriptor instead.
func (*CheckAccountPassRequest) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{17}
}

func (x *CheckAccountPassRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CheckAccountPassRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

type CheckAccountPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CheckAccountPassResponse_PassStatus `protobuf:"varint,1,opt,name=status,proto3,enum=record.CheckAccountPassResponse_PassStatus" json:"status,omitempty"`
}

func (x *CheckAccountPassResponse) Reset() {
	*x = CheckAccountPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_record_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccountPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountPassResponse) ProtoMessage() {}

func (x *CheckAccountPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_record_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountPassResponse.ProtoReflect.Descriptor instead.
func (*CheckAccountPassResponse) Descriptor() ([]byte, []int) {
	return file_rpc_record_proto_rawDescGZIP(), []int{18}
}

func (x *CheckAccountPassResponse) GetStatus() CheckAccountPassResponse_PassStatus {
	if x != nil {
		return x.Status
	}
	return CheckAccountPassResponse_Undo
}

var File_rpc_record_proto protoreflect.FileDescriptor

var file_rpc_record_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1b, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa3, 0x02, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x22, 0xa2, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x67, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x5f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x7a, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x65, 0x61, 0x7a, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64,
	0x22, 0x57, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x0a, 0x50,
	0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x6e, 0x64,
	0x6f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x10, 0x02, 0x32, 0x80, 0x06, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rpc_record_proto_rawDescOnce sync.Once
	file_rpc_record_proto_rawDescData = file_rpc_record_proto_rawDesc
)

func file_rpc_record_proto_rawDescGZIP() []byte {
	file_rpc_record_proto_rawDescOnce.Do(func() {
		file_rpc_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_record_proto_rawDescData)
	})
	return file_rpc_record_proto_rawDescData
}

var file_rpc_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_record_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_rpc_record_proto_goTypes = []interface{}{
	(CheckAccountPassResponse_PassStatus)(0), // 0: record.CheckAccountPassResponse.PassStatus
	(*SubmitRecordRequest)(nil),              // 1: record.SubmitRecordRequest
	(*SubmitRecordResponse)(nil),             // 2: record.SubmitRecordResponse
	(*ModifyRecordRequest)(nil),              // 3: record.ModifyRecordRequest
	(*ModifyRecordResponse)(nil),             // 4: record.ModifyRecordResponse
	(*GetRecordRequest)(nil),                 // 5: record.GetRecordRequest
	(*Record)(nil),                           // 6: record.Record
	(*GetRecordResponse)(nil),                // 7: record.GetRecordResponse
	(*GetBestRecordRequest)(nil),             // 8: record.GetBestRecordRequest
	(*GetBestRecordResponse)(nil),            // 9: record.GetBestRecordResponse
	(*GetRecordPageRequest)(nil),             // 10: record.GetRecordPageRequest
	(*GetRecordPageResponse)(nil),            // 11: record.GetRecordPageResponse
	(*GetDailyTaskViewRequest)(nil),          // 12: record.GetDailyTaskViewRequest
	(*GetDailyTaskViewResponse)(nil),         // 13: record.GetDailyTaskViewResponse
	(*GetQuestionRecordCountRequest)(nil),    // 14: record.GetQuestionRecordCountRequest
	(*GetQuestionRecordCountResponse)(nil),   // 15: record.GetQuestionRecordCountResponse
	(*GetAccountPassedCountRequest)(nil),     // 16: record.GetAccountPassedCountRequest
	(*GetAccountPassedCountResponse)(nil),    // 17: record.GetAccountPassedCountResponse
	(*CheckAccountPassRequest)(nil),          // 18: record.CheckAccountPassRequest
	(*CheckAccountPassResponse)(nil),         // 19: record.CheckAccountPassResponse
}
var file_rpc_record_proto_depIdxs = []int32{
	6,  // 0: record.GetRecordResponse.record:type_name -> record.Record
	6,  // 1: record.GetBestRecordResponse.record:type_name -> record.Record
	6,  // 2: record.GetRecordPageResponse.records:type_name -> record.Record
	0,  // 3: record.CheckAccountPassResponse.status:type_name -> record.CheckAccountPassResponse.PassStatus
	1,  // 4: record.RecordService.SubmitRecord:input_type -> record.SubmitRecordRequest
	3,  // 5: record.RecordService.ModifyRecord:input_type -> record.ModifyRecordRequest
	5,  // 6: record.RecordService.GetRecord:input_type -> record.GetRecordRequest
	8,  // 7: record.RecordService.GetBestRecord:input_type -> record.GetBestRecordRequest
	10, // 8: record.RecordService.GetRecordPage:input_type -> record.GetRecordPageRequest
	12, // 9: record.RecordService.GetDailyTaskView:input_type -> record.GetDailyTaskViewRequest
	14, // 10: record.RecordService.GetQuestionRecordCount:input_type -> record.GetQuestionRecordCountRequest
	16, // 11: record.RecordService.GetAccountPassedCount:input_type -> record.GetAccountPassedCountRequest
	18, // 12: record.RecordService.CheckAccountPass:input_type -> record.CheckAccountPassRequest
	2,  // 13: record.RecordService.SubmitRecord:output_type -> record.SubmitRecordResponse
	4,  // 14: record.RecordService.ModifyRecord:output_type -> record.ModifyRecordResponse
	7,  // 15: record.RecordService.GetRecord:output_type -> record.GetRecordResponse
	9,  // 16: record.RecordService.GetBestRecord:output_type -> record.GetBestRecordResponse
	11, // 17: record.RecordService.GetRecordPage:output_type -> record.GetRecordPageResponse
	13, // 18: record.RecordService.GetDailyTaskView:output_type -> record.GetDailyTaskViewResponse
	15, // 19: record.RecordService.GetQuestionRecordCount:output_type -> record.GetQuestionRecordCountResponse
	17, // 20: record.RecordService.GetAccountPassedCount:output_type -> record.GetAccountPassedCountResponse
	19, // 21: record.RecordService.CheckAccountPass:output_type -> record.CheckAccountPassResponse
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_rpc_record_proto_init() }
func file_rpc_record_proto_init() {
	if File_rpc_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBestRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBestRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyTaskViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyTaskViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionRecordCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionRecordCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountPassedCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountPassedCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccountPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_record_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccountPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_record_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rpc_record_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rpc_record_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rpc_record_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_rpc_record_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_record_proto_goTypes,
		DependencyIndexes: file_rpc_record_proto_depIdxs,
		EnumInfos:         file_rpc_record_proto_enumTypes,
		MessageInfos:      file_rpc_record_proto_msgTypes,
	}.Build()
	File_rpc_record_proto = out.File
	file_rpc_record_proto_rawDesc = nil
	file_rpc_record_proto_goTypes = nil
	file_rpc_record_proto_depIdxs = nil
}
