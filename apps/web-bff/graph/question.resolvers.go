package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"log/slog"
	ques_pb "moj/apps/question/rpc"
	"moj/apps/web-bff/graph/model"

	"google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

var (
	ErrorQuestionNotFound = fmt.Errorf("题目未找到")
)

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input model.QuestionInput) (*model.Question, error) {
	panic(fmt.Errorf("not implemented: CreateQuestion - createQuestion"))
}

// ModifyQuestion is the resolver for the modifyQuestion field.
func (r *mutationResolver) ModifyQuestion(ctx context.Context, input model.QuestionInput) (*model.Question, error) {
	panic(fmt.Errorf("not implemented: ModifyQuestion - modifyQuestion"))
}

func fromPbCase(cas *ques_pb.Case) *model.Case {
	return &model.Case{
		Number:         int(cas.Number),
		InputFilePath:  cas.InputFilePath,
		OutputFilePath: cas.OutFilePath,
	}
}

func fromPbQuestion(q *ques_pb.Question) *model.Question {
	return &model.Question{
		ID:               q.QuestionID,
		UserID:           q.AccountID,
		Enabled:          q.Enabled,
		Title:            q.Title,
		Content:          q.Content,
		Level:            model.Level(q.Level.String()),
		AllowedLanguages: q.AllowedLanguages,
		TimeLimit:        int(q.TimeLimit),
		MemoryLimit:      int(q.MemoryLimit),
		Tags:             q.Tags,
		CreateTime:       q.CreateTime,
		ModifyTime:       q.ModifyTime,
		Cases:            []*model.Case{},
	}
}

// Question is the resolver for the question field.
func (r *queryResolver) Question(ctx context.Context, id string) (*model.Question, error) {
	req := &ques_pb.GetQuestionRequest{
		QuestionID: id,
	}
	resp, err := r.RpcClients.QuestionClient.GetQuestion(ctx, req)
	if err != nil {
		slog.Error("failed to get question", "error", err)
		if status, ok := gstatus.FromError(err); ok {
			if status.Code() == codes.NotFound {
				return nil, ErrorQuestionNotFound
			}
		}
		return nil, ErrInternal
	}

}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context, pageSize int, afterID *string, filter *model.QuestionsFilter) (*model.QuestionPage, error) {
	panic(fmt.Errorf("not implemented: Questions - questions"))
}

// Cases is the resolver for the cases field.
func (r *questionResolver) Cases(ctx context.Context, obj *model.Question) ([]*model.Case, error) {
	panic(fmt.Errorf("not implemented: Cases - cases"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Question returns QuestionResolver implementation.
func (r *Resolver) Question() QuestionResolver { return &questionResolver{r} }

type queryResolver struct{ *Resolver }
type questionResolver struct{ *Resolver }
