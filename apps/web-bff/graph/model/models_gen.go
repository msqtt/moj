// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CursorPage interface {
	IsCursorPage()
	GetNextID() string
}

type OffsetPage interface {
	IsOffsetPage()
	GetTotal() int
}

type Case struct {
	Number         int    `json:"number"`
	InputFilePath  string `json:"inputFilePath"`
	OutputFilePath string `json:"outputFilePath"`
}

type ChangePasswordInput struct {
	ID          string `json:"id"`
	NewPassword string `json:"newPassword"`
	Captcha     string `json:"captcha"`
}

type FinishedQuestion struct {
	EazyCount   int `json:"eazyCount"`
	NormalCount int `json:"normalCount"`
	HardCount   int `json:"hardCount"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResult struct {
	Token *Token `json:"token"`
	User  *User  `json:"user"`
}

type Mutation struct {
}

type Query struct {
}

type Question struct {
	ID               string   `json:"id"`
	UserID           string   `json:"userID"`
	Enabled          bool     `json:"enabled"`
	Title            string   `json:"title"`
	Content          string   `json:"content"`
	Level            Level    `json:"level"`
	AllowedLanguages []string `json:"allowedLanguages"`
	TimeLimit        int      `json:"timeLimit"`
	MemoryLimit      int      `json:"memoryLimit"`
	Tags             []string `json:"tags"`
	CreateTime       string   `json:"createTime"`
	ModifyTime       string   `json:"modifyTime"`
	Cases            []*Case  `json:"cases"`
}

type QuestionInput struct {
	Title            string   `json:"title"`
	UserID           string   `json:"userID"`
	Content          string   `json:"content"`
	Level            Level    `json:"level"`
	AllowedLanguages []string `json:"allowedLanguages"`
	TimeLimit        int      `json:"timeLimit"`
	MemoryLimit      int      `json:"memoryLimit"`
	Tags             []string `json:"tags"`
}

type QuestionPage struct {
	NextID    string      `json:"nextID"`
	Questions []*Question `json:"questions"`
}

func (QuestionPage) IsCursorPage()          {}
func (this QuestionPage) GetNextID() string { return this.NextID }

type QuestionsFilter struct {
	Word      *string `json:"word,omitempty"`
	Enabled   *bool   `json:"enabled,omitempty"`
	Level     *Level  `json:"level,omitempty"`
	Language  *string `json:"language,omitempty"`
	CreaterID *string `json:"createrID,omitempty"`
}

type RegisterInput struct {
	NickName string `json:"nickName"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Captcha  string `json:"captcha"`
}

type SendChangePasswordEmail struct {
	UserID string `json:"userID"`
	Email  string `json:"email"`
}

type SendRegisterEmail struct {
	Email string `json:"email"`
}

type Time struct {
	Time string `json:"time"`
}

type Token struct {
	RefreshToken string `json:"refreshToken"`
	AccessToken  string `json:"accessToken"`
}

type User struct {
	ID                   string            `json:"id"`
	Email                string            `json:"email"`
	AvatarLink           string            `json:"avatarLink"`
	NickName             string            `json:"nickName"`
	Enabled              bool              `json:"enabled"`
	IsAdmin              bool              `json:"isAdmin"`
	LastLoginTime        string            `json:"lastLoginTime"`
	LastLoginIPAddr      string            `json:"lastLoginIPAddr"`
	LastLoginDevice      string            `json:"lastLoginDevice"`
	LastPasswdChangeTime string            `json:"lastPasswdChangeTime"`
	RegisterTime         string            `json:"registerTime"`
	DeleteTime           string            `json:"deleteTime"`
	FinishedQuestion     *FinishedQuestion `json:"finishedQuestion"`
}

type UserInfo struct {
	ID         string `json:"id"`
	NickName   string `json:"nickName"`
	AvatarLink string `json:"avatarLink"`
}

type UserPage struct {
	Users  []*User `json:"users"`
	NextID string  `json:"nextID"`
}

func (UserPage) IsCursorPage()          {}
func (this UserPage) GetNextID() string { return this.NextID }

type UsersFilter struct {
	Enabled *bool   `json:"enabled,omitempty"`
	IsAdmin *bool   `json:"isAdmin,omitempty"`
	Word    *string `json:"word,omitempty"`
}

type Level string

const (
	LevelEazy   Level = "Eazy"
	LevelNormal Level = "Normal"
	LevelHard   Level = "Hard"
)

var AllLevel = []Level{
	LevelEazy,
	LevelNormal,
	LevelHard,
}

func (e Level) IsValid() bool {
	switch e {
	case LevelEazy, LevelNormal, LevelHard:
		return true
	}
	return false
}

func (e Level) String() string {
	return string(e)
}

func (e *Level) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Level(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

func (e Level) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
