enum Level {
    Eazy
    Normal
    Hard
}

type Case {
    number: Int!
    inputFilePath: String!
    outputFilePath: String!
}

input CaseInput {
    number: Int!
    inputFilePath: String!
    outputFilePath: String!
}

type Question {
    id: ID!    
    createrID: ID!
    enabled: Boolean!
    title: String!
    content: String!
    level: Level!
    allowedLanguages: [String!]! 
    timeLimit: Int!
    memoryLimit: Int!
    tags: [String!]!
    createTime: String!
    modifyTime: String!
    cases: [Case!]!
}

type QuestionPage implements CursorPage {
    nextID: ID!
    questions: [Question!]!
}

# each filter is optional
input QuestionsFilter {
    # word used to search in title or tags or questionID
    word: String
    enabled: Boolean
    level: Level
    language: String
    createrID: ID
}

input QuestionInput {
    # 修改时必须提供id
    id: ID
    title: String!
    enabled: Boolean!
    content: String!
    level: Level!
    allowedLanguages: [String!]!
    timeLimit: Int!
    memoryLimit: Int!
    tags: [String!]!
    cases: [CaseInput!]!
}

type SubmitCount {
    submitCount: Int!
    passedCount: Int!
}

extend type Query {
    question(id: ID!): Question!
    questions(pageSize:Int!, afterID:String, filter: QuestionsFilter): QuestionPage!
    
    questionSubmitCount(qid: ID!, gid: ID): SubmitCount!
}

extend type Mutation {
    createQuestion(input: QuestionInput!): Question!
    modifyQuestion(input: QuestionInput!): Question!
    deleteQuestion(id: ID!): Time!
    checkUserPassedQuestion(id: ID!): Boolean!
} 