package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"log/slog"
	user_pb "moj/apps/user/rpc"
	"moj/apps/web-bff/graph/model"
	"moj/apps/web-bff/middleware"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// SendRegisterEmail is the resolver for the sendRegisterEmail field.
func (r *mutationResolver) SendRegisterEmail(ctx context.Context, input model.SendRegisterEmail) (*model.Time, error) {
	ip, err := middleware.GetClientIpFromContext(ctx)
	if err != nil {
		slog.Error("send register email error getting client ip", err)
		ip = "unknown"
	}
	req := &user_pb.SendRegisterCaptchaRequest{
		Email:  input.Email,
		IpAddr: ip,
	}

	resp, err := r.RpcClients.CaptchaClient.SendRegisterCaptcha(ctx, req)
	if err != nil {
		slog.Error("send register email error", "err", err)
		if status, ok := status.FromError(err); ok {
			switch status.Code() {
			case codes.AlreadyExists:
				return nil, ErrCaptchaEmailExists
			case codes.InvalidArgument:
				return nil, ErrCaptchaEmailInvaild
			default:
			}
		}
		return nil, ErrInternal
	}

	return fromInt64Second(resp.GetTime()), nil
}

// SendChangePasswordEmail is the resolver for the sendChangePasswordEmail field.
func (r *mutationResolver) SendChangePasswordEmail(ctx context.Context, input model.SendChangePasswordEmail) (*model.Time, error) {
	ip, err := middleware.GetClientIpFromContext(ctx)
	if err != nil {
		slog.Error("send register email error getting client ip", "err", err)
		ip = "unknown"
	}
	req := &user_pb.SendChangePasswdCaptchaRequest{
		AccountID: input.UserID,
		Email:     input.Email,
		IpAddr:    ip,
	}
	resp, err := r.RpcClients.CaptchaClient.SendChangePasswdCaptcha(ctx, req)
	if err != nil {
		slog.Error("send change password email error", "err", err)
		return nil, err
	}

	return fromInt64Second(resp.GetTime()), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var (
	ErrCaptchaEmailExists  = errors.New("输入邮箱已注册")
	ErrCaptchaEmailInvaild = errors.New("输入邮箱格式错误")
)
