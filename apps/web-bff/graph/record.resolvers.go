package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"log/slog"
	red_pb "moj/record/rpc"
	"moj/web-bff/graph/model"
	"moj/web-bff/pkg"

	"google.golang.org/grpc/codes"
	gstatus "google.golang.org/grpc/status"
)

// SubmitRecord is the resolver for the submitRecord field.
func (r *mutationResolver) SubmitRecord(ctx context.Context, questionID string, gameID *string, code string, language string) (*model.Record, error) {
	uid, err := checkUserLogin(r.RpcClients.UserClient, r.sessionManager, ctx, "", false)
	if err != nil {
		return nil, err
	}

	req := &red_pb.SubmitRecordRequest{
		AccountID:  uid,
		QuestionID: questionID,
		GameID:     gameID,
		Language:   language,
		Code:       code,
	}

	resp, err := r.RpcClients.RecordClient.SubmitRecord(ctx, req)
	if err != nil {
		slog.Error("submit record error", "err", err)
		return nil, ErrInternal
	}

	record, err := findRecord(r.RpcClients.RecordClient, ctx, resp.RecordID)
	if err != nil {
		slog.Error("submit record: get record error", "err", err)
		return nil, ErrInternal
	}

	return record, err
}

// Record is the resolver for the record field.
func (r *queryResolver) Record(ctx context.Context, id string) (*model.Record, error) {
	red, err := findRecord(r.RpcClients.RecordClient, ctx, id)
	if err != nil {
		slog.Error("get record error", "err", err)
		return nil, err
	}
	_, err = checkUserLogin(r.RpcClients.UserClient, r.sessionManager, ctx, red.UserID, false)
	if err != nil {
		return nil, err
	}

	return red, err
}

// Records is the resolver for the records field.
func (r *queryResolver) Records(ctx context.Context, questionID string, gameID *string, page int, pageSize int) (*model.RecordPage, error) {
	uid, err := checkUserLogin(r.RpcClients.UserClient, r.sessionManager, ctx, "", false)
	if err != nil {
		return nil, err
	}

	resp, err := r.RpcClients.RecordClient.GetRecordPage(ctx, &red_pb.GetRecordPageRequest{
		QuestionID: questionID,
		AccountID:  uid,
		GameID:     gameID,
		Page:       int32(page),
		PageSize:   int32(pageSize),
	})
	if err != nil {
		slog.Error("get records page error", "err", err)
		if status, ok := gstatus.FromError(err); ok {
			if status.Code() == codes.NotFound {
				return nil, ErrRecordNotFound
			}
		}
		return nil, ErrInternal
	}

	records := make([]*model.Record, 0, len(resp.Records))
	for id, red := range resp.Records {
		records[id] = fromPbRecord(red)
	}

	return &model.RecordPage{
		Records: records,
		Total:   int(resp.Total),
	}, err
}

// DailyTasksNumber is the resolver for the dailyTasksNumber field.
func (r *queryResolver) DailyTasksNumber(ctx context.Context, time string) (*model.DailyTasksNumber, error) {
	t, err := stringToInt64(time)
	if err != nil {
		slog.Error("get daily tasks number time error", "err", err)
		return nil, ErrInternal
	}

	req := &red_pb.GetDailyTaskViewRequest{
		Time: t,
	}

	resp, err := r.RpcClients.RecordClient.GetDailyTaskView(ctx, req)
	if err != nil {
		slog.Error("get daily tasks number error", "err", err)
		if status, ok := gstatus.FromError(err); ok {
			if status.Code() == codes.NotFound {
				return nil, ErrDailyTaskNotFound
			}
		}
		return nil, ErrInternal
	}

	return &model.DailyTasksNumber{
		SumbitNumber: int(resp.SubmitNumber),
		FinishNumber: int(resp.FinishNumber),
	}, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var (
	ErrRecordNotFound    = errors.New("提交记录不存在")
	ErrDailyTaskNotFound = errors.New("每日任务不存在")
)

func fromPbRecord(red *red_pb.Record) *model.Record {
	return &model.Record{
		ID:               red.RecordID,
		UserID:           red.AccountID,
		QuestionID:       red.GetQuestionID(),
		GameID:           red.GameID,
		Language:         red.GetLanguage(),
		Code:             red.GetCode(),
		CodeHash:         red.CodeHash,
		JudgeStatus:      red.JudgeStatus,
		FailedReason:     *red.FailedReason,
		NumberFinishedAt: int(red.NumberFinishedAt),
		TotalCase:        int(red.TotalQuestion),
		CreateTime:       pkg.Int64ToString(red.CreateTime),
		FinishTime:       pkg.Int64ToString(red.FinishTime),
		MemoryUsed:       int(red.MemoryUsed),
		TimeUserd:        int(red.TimeUsed),
		CPUTimeUsed:      int(red.CpuTimeUsed),
	}
}
func findRecord(client red_pb.RecordServiceClient, ctx context.Context, id string) (*model.Record, error) {
	resp, err := client.GetRecord(ctx, &red_pb.GetRecordRequest{
		RecordID: id,
	})
	if err != nil {
		if status, ok := gstatus.FromError(err); ok {
			if status.Code() == codes.NotFound {
				return nil, ErrRecordNotFound
			}
		}
		return nil, ErrInternal
	}
	return fromPbRecord(resp.GetRecord()), nil
}
