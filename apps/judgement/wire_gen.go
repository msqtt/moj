// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"moj/judgement/db"
	"moj/judgement/domain"
	"moj/judgement/etc"
	"moj/judgement/listener"
	"moj/judgement/mq/consumer"
	"moj/judgement/mq/producer"
	"moj/judgement/svc"
	"moj/domain/judgement"
)

// Injectors from wire.go:

func InitializeApplication() *App {
	config := etc.NewAppConfig()
	mongoDB := db.NewMongoDB(config)
	transactionManager := db.NewMongoDBTransactionManager(mongoDB)
	eventDispatcher := provideDispatcher(config)
	commandInvoker := domain.NewTransactionCommandInvoker(transactionManager, eventDispatcher)
	judgementRepository := domain.NewMongoDBJudementRepository(mongoDB)
	executionService := domain.NewSbJudger(config)
	executionCmdHandler := judgement.NewExecutionCmdHandler(judgementRepository, executionService)
	questionRepository := domain.NewRPCQuestionRepository(config)
	caseFileService := domain.NewMinioCaseReader()
	server := svc.NewServer(commandInvoker, executionCmdHandler, questionRepository, caseFileService)
	nsqExecuteJudgementConsumer := consumer.NewNsqExecuteJudgementConsumer(config, executionCmdHandler, caseFileService, questionRepository, eventDispatcher)
	app := NewApp(server, mongoDB, config, nsqExecuteJudgementConsumer)
	return app
}

// wire.go:

func provideDispatcher(conf *etc.Config) domain.EventDispatcher {
	return domain.NewSyncAndAsyncEventDispatcher(
		[]listener.Listener{},
		[]producer.Producer{producer.NewNsqModifyRecordProducer(conf)})
}

var providers = wire.NewSet(svc.NewServer, domain.NewTransactionCommandInvoker, domain.NewMongoDBJudementRepository, domain.NewSbJudger, domain.NewRPCQuestionRepository, domain.NewMinioCaseReader, judgement.NewExecutionCmdHandler, consumer.NewNsqExecuteJudgementConsumer, provideDispatcher, db.NewMongoDBTransactionManager, db.NewMongoDB, etc.NewAppConfig)
