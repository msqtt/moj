// Code generated by MockGen. DO NOT EDIT.
// Source: domain/pkg/crypt/crypt.go
//
// Generated by this command:
//
//	mockgen -package mock_account -source domain/pkg/crypt/crypt.go -destination domain/service/account/mock/crypt.go
//

// Package mock_account is a generated GoMock package.
package mock_account

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCryptor is a mock of Cryptor interface.
type MockCryptor struct {
	ctrl     *gomock.Controller
	recorder *MockCryptorMockRecorder
}

// MockCryptorMockRecorder is the mock recorder for MockCryptor.
type MockCryptorMockRecorder struct {
	mock *MockCryptor
}

// NewMockCryptor creates a new mock instance.
func NewMockCryptor(ctrl *gomock.Controller) *MockCryptor {
	mock := &MockCryptor{ctrl: ctrl}
	mock.recorder = &MockCryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptor) EXPECT() *MockCryptorMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockCryptor) Encrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptorMockRecorder) Encrypt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptor)(nil).Encrypt), arg0)
}

// Valid mocks base method.
func (m *MockCryptor) Valid(raw, hashed string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid", raw, hashed)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Valid indicates an expected call of Valid.
func (mr *MockCryptorMockRecorder) Valid(raw, hashed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockCryptor)(nil).Valid), raw, hashed)
}
